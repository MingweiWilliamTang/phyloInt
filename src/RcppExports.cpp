// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// mvrnormArma
arma::mat mvrnormArma(int n, arma::mat sigma);
RcppExport SEXP _phyloInt_mvrnormArma(SEXP nSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvrnormArma(n, sigma));
    return rcpp_result_gen;
END_RCPP
}
// LogTraj
arma::mat LogTraj(arma::mat Traj);
RcppExport SEXP _phyloInt_LogTraj(SEXP TrajSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Traj(TrajSEXP);
    rcpp_result_gen = Rcpp::wrap(LogTraj(Traj));
    return rcpp_result_gen;
END_RCPP
}
// betaTs
arma::vec betaTs(arma::vec param, arma::vec times, arma::vec x_r, arma::ivec x_i);
RcppExport SEXP _phyloInt_betaTs(SEXP paramSEXP, SEXP timesSEXP, SEXP x_rSEXP, SEXP x_iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type param(paramSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type times(timesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_r(x_rSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type x_i(x_iSEXP);
    rcpp_result_gen = Rcpp::wrap(betaTs(param, times, x_r, x_i));
    return rcpp_result_gen;
END_RCPP
}
// RTs
arma::vec RTs(arma::vec param, arma::vec times, arma::vec x_r, arma::ivec x_i);
RcppExport SEXP _phyloInt_RTs(SEXP paramSEXP, SEXP timesSEXP, SEXP x_rSEXP, SEXP x_iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type param(paramSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type times(timesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_r(x_rSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type x_i(x_iSEXP);
    rcpp_result_gen = Rcpp::wrap(RTs(param, times, x_r, x_i));
    return rcpp_result_gen;
END_RCPP
}
// param_transform
arma::vec param_transform(double t, arma::vec param, arma::vec x_r, arma::ivec x_i);
RcppExport SEXP _phyloInt_param_transform(SEXP tSEXP, SEXP paramSEXP, SEXP x_rSEXP, SEXP x_iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type param(paramSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_r(x_rSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type x_i(x_iSEXP);
    rcpp_result_gen = Rcpp::wrap(param_transform(t, param, x_r, x_i));
    return rcpp_result_gen;
END_RCPP
}
// ODE_SIR_one
arma::vec ODE_SIR_one(arma::vec states, arma::vec param, double t, arma::vec x_r, arma::ivec x_i, std::string transP, std::string transX);
RcppExport SEXP _phyloInt_ODE_SIR_one(SEXP statesSEXP, SEXP paramSEXP, SEXP tSEXP, SEXP x_rSEXP, SEXP x_iSEXP, SEXP transPSEXP, SEXP transXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type states(statesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type param(paramSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_r(x_rSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< std::string >::type transP(transPSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    rcpp_result_gen = Rcpp::wrap(ODE_SIR_one(states, param, t, x_r, x_i, transP, transX));
    return rcpp_result_gen;
END_RCPP
}
// ODE_SEIR_one
arma::vec ODE_SEIR_one(arma::vec states, arma::vec param, double t, arma::vec x_r, arma::ivec x_i, std::string transP, std::string transX);
RcppExport SEXP _phyloInt_ODE_SEIR_one(SEXP statesSEXP, SEXP paramSEXP, SEXP tSEXP, SEXP x_rSEXP, SEXP x_iSEXP, SEXP transPSEXP, SEXP transXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type states(statesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type param(paramSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_r(x_rSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< std::string >::type transP(transPSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    rcpp_result_gen = Rcpp::wrap(ODE_SEIR_one(states, param, t, x_r, x_i, transP, transX));
    return rcpp_result_gen;
END_RCPP
}
// ODE_SIRS_one
arma::vec ODE_SIRS_one(arma::vec states, arma::vec param, double t, arma::vec x_r, arma::ivec x_i, std::string transP, std::string transX);
RcppExport SEXP _phyloInt_ODE_SIRS_one(SEXP statesSEXP, SEXP paramSEXP, SEXP tSEXP, SEXP x_rSEXP, SEXP x_iSEXP, SEXP transPSEXP, SEXP transXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type states(statesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type param(paramSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_r(x_rSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< std::string >::type transP(transPSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    rcpp_result_gen = Rcpp::wrap(ODE_SIRS_one(states, param, t, x_r, x_i, transP, transX));
    return rcpp_result_gen;
END_RCPP
}
// SIRS_F
arma::mat SIRS_F(arma::vec states, arma::vec thetas, std::string transX);
RcppExport SEXP _phyloInt_SIRS_F(SEXP statesSEXP, SEXP thetasSEXP, SEXP transXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type states(statesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    rcpp_result_gen = Rcpp::wrap(SIRS_F(states, thetas, transX));
    return rcpp_result_gen;
END_RCPP
}
// SIR_F
arma::mat SIR_F(arma::vec states, arma::vec thetas, std::string transX);
RcppExport SEXP _phyloInt_SIR_F(SEXP statesSEXP, SEXP thetasSEXP, SEXP transXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type states(statesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    rcpp_result_gen = Rcpp::wrap(SIR_F(states, thetas, transX));
    return rcpp_result_gen;
END_RCPP
}
// SEIR2_F
arma::mat SEIR2_F(arma::vec states, arma::vec thetas, std::string transX);
RcppExport SEXP _phyloInt_SEIR2_F(SEXP statesSEXP, SEXP thetasSEXP, SEXP transXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type states(statesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    rcpp_result_gen = Rcpp::wrap(SEIR2_F(states, thetas, transX));
    return rcpp_result_gen;
END_RCPP
}
// SEIR_F
arma::mat SEIR_F(arma::vec states, arma::vec thetas, std::string transX);
RcppExport SEXP _phyloInt_SEIR_F(SEXP statesSEXP, SEXP thetasSEXP, SEXP transXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type states(statesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    rcpp_result_gen = Rcpp::wrap(SEIR_F(states, thetas, transX));
    return rcpp_result_gen;
END_RCPP
}
// SIR_h
arma::vec SIR_h(arma::vec states, arma::vec thetas, std::string transX);
RcppExport SEXP _phyloInt_SIR_h(SEXP statesSEXP, SEXP thetasSEXP, SEXP transXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type states(statesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    rcpp_result_gen = Rcpp::wrap(SIR_h(states, thetas, transX));
    return rcpp_result_gen;
END_RCPP
}
// SEIR2_h
arma::vec SEIR2_h(arma::vec states, arma::vec thetas, std::string transX);
RcppExport SEXP _phyloInt_SEIR2_h(SEXP statesSEXP, SEXP thetasSEXP, SEXP transXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type states(statesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    rcpp_result_gen = Rcpp::wrap(SEIR2_h(states, thetas, transX));
    return rcpp_result_gen;
END_RCPP
}
// SEIR_h
arma::vec SEIR_h(arma::vec states, arma::vec thetas, std::string transX);
RcppExport SEXP _phyloInt_SEIR_h(SEXP statesSEXP, SEXP thetasSEXP, SEXP transXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type states(statesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    rcpp_result_gen = Rcpp::wrap(SEIR_h(states, thetas, transX));
    return rcpp_result_gen;
END_RCPP
}
// ODE_rk45
arma::mat ODE_rk45(arma::vec initial, arma::vec t, arma::vec param, arma::vec x_r, arma::ivec x_i, std::string transP, std::string model, std::string transX);
RcppExport SEXP _phyloInt_ODE_rk45(SEXP initialSEXP, SEXP tSEXP, SEXP paramSEXP, SEXP x_rSEXP, SEXP x_iSEXP, SEXP transPSEXP, SEXP modelSEXP, SEXP transXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type param(paramSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_r(x_rSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< std::string >::type transP(transPSEXP);
    Rcpp::traits::input_parameter< std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    rcpp_result_gen = Rcpp::wrap(ODE_rk45(initial, t, param, x_r, x_i, transP, model, transX));
    return rcpp_result_gen;
END_RCPP
}
// ODE_rk45_stop
double ODE_rk45_stop(arma::vec initial, arma::vec t, arma::vec param, arma::vec x_r, arma::ivec x_i, std::string transP, std::string model, std::string transX, double tol);
RcppExport SEXP _phyloInt_ODE_rk45_stop(SEXP initialSEXP, SEXP tSEXP, SEXP paramSEXP, SEXP x_rSEXP, SEXP x_iSEXP, SEXP transPSEXP, SEXP modelSEXP, SEXP transXSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type param(paramSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_r(x_rSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< std::string >::type transP(transPSEXP);
    Rcpp::traits::input_parameter< std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ODE_rk45_stop(initial, t, param, x_r, x_i, transP, model, transX, tol));
    return rcpp_result_gen;
END_RCPP
}
// SigmaF
List SigmaF(arma::mat Traj_par, arma::vec param, arma::vec x_r, arma::ivec x_i, std::string transP, std::string model, std::string transX);
RcppExport SEXP _phyloInt_SigmaF(SEXP Traj_parSEXP, SEXP paramSEXP, SEXP x_rSEXP, SEXP x_iSEXP, SEXP transPSEXP, SEXP modelSEXP, SEXP transXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Traj_par(Traj_parSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type param(paramSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_r(x_rSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< std::string >::type transP(transPSEXP);
    Rcpp::traits::input_parameter< std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    rcpp_result_gen = Rcpp::wrap(SigmaF(Traj_par, param, x_r, x_i, transP, model, transX));
    return rcpp_result_gen;
END_RCPP
}
// KF_param
List KF_param(arma::mat OdeTraj, arma::vec param, int gridsize, arma::vec x_r, arma::ivec x_i, std::string transP, std::string model, std::string transX);
RcppExport SEXP _phyloInt_KF_param(SEXP OdeTrajSEXP, SEXP paramSEXP, SEXP gridsizeSEXP, SEXP x_rSEXP, SEXP x_iSEXP, SEXP transPSEXP, SEXP modelSEXP, SEXP transXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type OdeTraj(OdeTrajSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_r(x_rSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< std::string >::type transP(transPSEXP);
    Rcpp::traits::input_parameter< std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    rcpp_result_gen = Rcpp::wrap(KF_param(OdeTraj, param, gridsize, x_r, x_i, transP, model, transX));
    return rcpp_result_gen;
END_RCPP
}
// KF_param_chol
List KF_param_chol(arma::mat OdeTraj, arma::vec param, int gridsize, arma::vec x_r, arma::ivec x_i, std::string transP, std::string model, std::string transX);
RcppExport SEXP _phyloInt_KF_param_chol(SEXP OdeTrajSEXP, SEXP paramSEXP, SEXP gridsizeSEXP, SEXP x_rSEXP, SEXP x_iSEXP, SEXP transPSEXP, SEXP modelSEXP, SEXP transXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type OdeTraj(OdeTrajSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_r(x_rSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< std::string >::type transP(transPSEXP);
    Rcpp::traits::input_parameter< std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    rcpp_result_gen = Rcpp::wrap(KF_param_chol(OdeTraj, param, gridsize, x_r, x_i, transP, model, transX));
    return rcpp_result_gen;
END_RCPP
}
// log_like_traj_general2
double log_like_traj_general2(arma::mat SdeTraj, arma::mat OdeTraj, List Filter, int gridsize, double t_correct);
RcppExport SEXP _phyloInt_log_like_traj_general2(SEXP SdeTrajSEXP, SEXP OdeTrajSEXP, SEXP FilterSEXP, SEXP gridsizeSEXP, SEXP t_correctSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type SdeTraj(SdeTrajSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type OdeTraj(OdeTrajSEXP);
    Rcpp::traits::input_parameter< List >::type Filter(FilterSEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    rcpp_result_gen = Rcpp::wrap(log_like_traj_general2(SdeTraj, OdeTraj, Filter, gridsize, t_correct));
    return rcpp_result_gen;
END_RCPP
}
// log_like_traj_general_ez
double log_like_traj_general_ez(arma::mat SdeTraj, double t_correct, arma::vec initial, arma::vec t, arma::vec param, arma::vec x_r, arma::ivec x_i, std::string transP, std::string model, std::string transX);
RcppExport SEXP _phyloInt_log_like_traj_general_ez(SEXP SdeTrajSEXP, SEXP t_correctSEXP, SEXP initialSEXP, SEXP tSEXP, SEXP paramSEXP, SEXP x_rSEXP, SEXP x_iSEXP, SEXP transPSEXP, SEXP modelSEXP, SEXP transXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type SdeTraj(SdeTrajSEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type param(paramSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_r(x_rSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< std::string >::type transP(transPSEXP);
    Rcpp::traits::input_parameter< std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    rcpp_result_gen = Rcpp::wrap(log_like_traj_general_ez(SdeTraj, t_correct, initial, t, param, x_r, x_i, transP, model, transX));
    return rcpp_result_gen;
END_RCPP
}
// log_like_traj_general_adjust
double log_like_traj_general_adjust(arma::mat SdeTraj, arma::mat OdeTraj, List Filter_NC, int gridsize, double t_correct);
RcppExport SEXP _phyloInt_log_like_traj_general_adjust(SEXP SdeTrajSEXP, SEXP OdeTrajSEXP, SEXP Filter_NCSEXP, SEXP gridsizeSEXP, SEXP t_correctSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type SdeTraj(SdeTrajSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type OdeTraj(OdeTrajSEXP);
    Rcpp::traits::input_parameter< List >::type Filter_NC(Filter_NCSEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    rcpp_result_gen = Rcpp::wrap(log_like_traj_general_adjust(SdeTraj, OdeTraj, Filter_NC, gridsize, t_correct));
    return rcpp_result_gen;
END_RCPP
}
// Traj_sim_general3
List Traj_sim_general3(arma::mat OdeTraj, List Filter, double t_correct);
RcppExport SEXP _phyloInt_Traj_sim_general3(SEXP OdeTrajSEXP, SEXP FilterSEXP, SEXP t_correctSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type OdeTraj(OdeTrajSEXP);
    Rcpp::traits::input_parameter< List >::type Filter(FilterSEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    rcpp_result_gen = Rcpp::wrap(Traj_sim_general3(OdeTraj, Filter, t_correct));
    return rcpp_result_gen;
END_RCPP
}
// Traj_sim_general_noncentral
List Traj_sim_general_noncentral(arma::mat OdeTraj, List Filter_NC, double t_correct);
RcppExport SEXP _phyloInt_Traj_sim_general_noncentral(SEXP OdeTrajSEXP, SEXP Filter_NCSEXP, SEXP t_correctSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type OdeTraj(OdeTrajSEXP);
    Rcpp::traits::input_parameter< List >::type Filter_NC(Filter_NCSEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    rcpp_result_gen = Rcpp::wrap(Traj_sim_general_noncentral(OdeTraj, Filter_NC, t_correct));
    return rcpp_result_gen;
END_RCPP
}
// TransformTraj
arma::mat TransformTraj(arma::mat OdeTraj, arma::mat OriginLatent, List Filter_NC);
RcppExport SEXP _phyloInt_TransformTraj(SEXP OdeTrajSEXP, SEXP OriginLatentSEXP, SEXP Filter_NCSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type OdeTraj(OdeTrajSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type OriginLatent(OriginLatentSEXP);
    Rcpp::traits::input_parameter< List >::type Filter_NC(Filter_NCSEXP);
    rcpp_result_gen = Rcpp::wrap(TransformTraj(OdeTraj, OriginLatent, Filter_NC));
    return rcpp_result_gen;
END_RCPP
}
// Traj_sim_ezG2
List Traj_sim_ezG2(arma::vec initial, arma::vec times, arma::vec param, int gridsize, arma::vec x_r, arma::ivec x_i, double t_correct, std::string transP, std::string model, std::string transX);
RcppExport SEXP _phyloInt_Traj_sim_ezG2(SEXP initialSEXP, SEXP timesSEXP, SEXP paramSEXP, SEXP gridsizeSEXP, SEXP x_rSEXP, SEXP x_iSEXP, SEXP t_correctSEXP, SEXP transPSEXP, SEXP modelSEXP, SEXP transXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type times(timesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_r(x_rSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    Rcpp::traits::input_parameter< std::string >::type transP(transPSEXP);
    Rcpp::traits::input_parameter< std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    rcpp_result_gen = Rcpp::wrap(Traj_sim_ezG2(initial, times, param, gridsize, x_r, x_i, t_correct, transP, model, transX));
    return rcpp_result_gen;
END_RCPP
}
// Traj_sim_ezG_NC
List Traj_sim_ezG_NC(arma::vec initial, arma::vec times, arma::vec param, int gridsize, arma::vec x_r, arma::ivec x_i, double t_correct, std::string transP, std::string model, std::string transX);
RcppExport SEXP _phyloInt_Traj_sim_ezG_NC(SEXP initialSEXP, SEXP timesSEXP, SEXP paramSEXP, SEXP gridsizeSEXP, SEXP x_rSEXP, SEXP x_iSEXP, SEXP t_correctSEXP, SEXP transPSEXP, SEXP modelSEXP, SEXP transXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type times(timesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_r(x_rSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    Rcpp::traits::input_parameter< std::string >::type transP(transPSEXP);
    Rcpp::traits::input_parameter< std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    rcpp_result_gen = Rcpp::wrap(Traj_sim_ezG_NC(initial, times, param, gridsize, x_r, x_i, t_correct, transP, model, transX));
    return rcpp_result_gen;
END_RCPP
}
// coal_loglik3
double coal_loglik3(List init, arma::mat f1, double t_correct, double lambda, int Index, std::string transX);
RcppExport SEXP _phyloInt_coal_loglik3(SEXP initSEXP, SEXP f1SEXP, SEXP t_correctSEXP, SEXP lambdaSEXP, SEXP IndexSEXP, SEXP transXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type init(initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type f1(f1SEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type Index(IndexSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    rcpp_result_gen = Rcpp::wrap(coal_loglik3(init, f1, t_correct, lambda, Index, transX));
    return rcpp_result_gen;
END_RCPP
}
// volz_loglik_nh3
double volz_loglik_nh3(List init, arma::mat f1, arma::vec betaN, double t_correct, arma::ivec index, std::string transX);
RcppExport SEXP _phyloInt_volz_loglik_nh3(SEXP initSEXP, SEXP f1SEXP, SEXP betaNSEXP, SEXP t_correctSEXP, SEXP indexSEXP, SEXP transXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type init(initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type f1(f1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaN(betaNSEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type index(indexSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    rcpp_result_gen = Rcpp::wrap(volz_loglik_nh3(init, f1, betaN, t_correct, index, transX));
    return rcpp_result_gen;
END_RCPP
}
// volz_loglik_nh2
double volz_loglik_nh2(List init, arma::mat f1, arma::vec betaN, double t_correct, arma::ivec index, std::string transX);
RcppExport SEXP _phyloInt_volz_loglik_nh2(SEXP initSEXP, SEXP f1SEXP, SEXP betaNSEXP, SEXP t_correctSEXP, SEXP indexSEXP, SEXP transXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type init(initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type f1(f1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaN(betaNSEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type index(indexSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    rcpp_result_gen = Rcpp::wrap(volz_loglik_nh2(init, f1, betaN, t_correct, index, transX));
    return rcpp_result_gen;
END_RCPP
}
// volz_loglik_nh_adj
double volz_loglik_nh_adj(List init, arma::mat f1, arma::vec betaN, double t_correct, arma::ivec index, bool enable);
RcppExport SEXP _phyloInt_volz_loglik_nh_adj(SEXP initSEXP, SEXP f1SEXP, SEXP betaNSEXP, SEXP t_correctSEXP, SEXP indexSEXP, SEXP enableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type init(initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type f1(f1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaN(betaNSEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type index(indexSEXP);
    Rcpp::traits::input_parameter< bool >::type enable(enableSEXP);
    rcpp_result_gen = Rcpp::wrap(volz_loglik_nh_adj(init, f1, betaN, t_correct, index, enable));
    return rcpp_result_gen;
END_RCPP
}
// Ode_Coarse_Slicer
arma::mat Ode_Coarse_Slicer(arma::mat Ode_thin, int gridsize);
RcppExport SEXP _phyloInt_Ode_Coarse_Slicer(SEXP Ode_thinSEXP, SEXP gridsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Ode_thin(Ode_thinSEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(Ode_Coarse_Slicer(Ode_thin, gridsize));
    return rcpp_result_gen;
END_RCPP
}
// SIR_incidence_Traj
arma::mat SIR_incidence_Traj(arma::mat Traj, arma::ivec gridrep);
RcppExport SEXP _phyloInt_SIR_incidence_Traj(SEXP TrajSEXP, SEXP gridrepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Traj(TrajSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type gridrep(gridrepSEXP);
    rcpp_result_gen = Rcpp::wrap(SIR_incidence_Traj(Traj, gridrep));
    return rcpp_result_gen;
END_RCPP
}
// log_pref
double log_pref(arma::mat Traj, List& SampleInit, arma::vec Pref_par, bool Pois, bool enable);
RcppExport SEXP _phyloInt_log_pref(SEXP TrajSEXP, SEXP SampleInitSEXP, SEXP Pref_parSEXP, SEXP PoisSEXP, SEXP enableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Traj(TrajSEXP);
    Rcpp::traits::input_parameter< List& >::type SampleInit(SampleInitSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Pref_par(Pref_parSEXP);
    Rcpp::traits::input_parameter< bool >::type Pois(PoisSEXP);
    Rcpp::traits::input_parameter< bool >::type enable(enableSEXP);
    rcpp_result_gen = Rcpp::wrap(log_pref(Traj, SampleInit, Pref_par, Pois, enable));
    return rcpp_result_gen;
END_RCPP
}
// SIR_Traj
arma::mat SIR_Traj(arma::mat Traj, arma::ivec gridrep);
RcppExport SEXP _phyloInt_SIR_Traj(SEXP TrajSEXP, SEXP gridrepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Traj(TrajSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type gridrep(gridrepSEXP);
    rcpp_result_gen = Rcpp::wrap(SIR_Traj(Traj, gridrep));
    return rcpp_result_gen;
END_RCPP
}
// log_prev
double log_prev(arma::mat Traj, List& SampleInit, arma::vec Pref_par, bool Pois, bool enable);
RcppExport SEXP _phyloInt_log_prev(SEXP TrajSEXP, SEXP SampleInitSEXP, SEXP Pref_parSEXP, SEXP PoisSEXP, SEXP enableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Traj(TrajSEXP);
    Rcpp::traits::input_parameter< List& >::type SampleInit(SampleInitSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Pref_par(Pref_parSEXP);
    Rcpp::traits::input_parameter< bool >::type Pois(PoisSEXP);
    Rcpp::traits::input_parameter< bool >::type enable(enableSEXP);
    rcpp_result_gen = Rcpp::wrap(log_prev(Traj, SampleInit, Pref_par, Pois, enable));
    return rcpp_result_gen;
END_RCPP
}
// log_incidence_approx
double log_incidence_approx(arma::vec betat, arma::mat Traj, arma::mat Incidence_obs, arma::vec incid_par, arma::vec dts, bool Pois);
RcppExport SEXP _phyloInt_log_incidence_approx(SEXP betatSEXP, SEXP TrajSEXP, SEXP Incidence_obsSEXP, SEXP incid_parSEXP, SEXP dtsSEXP, SEXP PoisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type betat(betatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Traj(TrajSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Incidence_obs(Incidence_obsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type incid_par(incid_parSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type dts(dtsSEXP);
    Rcpp::traits::input_parameter< bool >::type Pois(PoisSEXP);
    rcpp_result_gen = Rcpp::wrap(log_incidence_approx(betat, Traj, Incidence_obs, incid_par, dts, Pois));
    return rcpp_result_gen;
END_RCPP
}
// New_Param_List
List New_Param_List(arma::vec param, arma::vec initial, int gridsize, arma::vec t, arma::vec x_r, arma::ivec x_i, std::string transP, std::string model, std::string transX);
RcppExport SEXP _phyloInt_New_Param_List(SEXP paramSEXP, SEXP initialSEXP, SEXP gridsizeSEXP, SEXP tSEXP, SEXP x_rSEXP, SEXP x_iSEXP, SEXP transPSEXP, SEXP modelSEXP, SEXP transXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type param(paramSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_r(x_rSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< std::string >::type transP(transPSEXP);
    Rcpp::traits::input_parameter< std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    rcpp_result_gen = Rcpp::wrap(New_Param_List(param, initial, gridsize, t, x_r, x_i, transP, model, transX));
    return rcpp_result_gen;
END_RCPP
}
// Update_Param
List Update_Param(arma::vec param, arma::vec initial, arma::vec t, arma::mat OriginTraj, arma::vec x_r, arma::ivec x_i, List init, int gridsize, double coal_log, double prior_proposal_offset, double t_correct, std::string transP, std::string model, std::string transX, bool volz);
RcppExport SEXP _phyloInt_Update_Param(SEXP paramSEXP, SEXP initialSEXP, SEXP tSEXP, SEXP OriginTrajSEXP, SEXP x_rSEXP, SEXP x_iSEXP, SEXP initSEXP, SEXP gridsizeSEXP, SEXP coal_logSEXP, SEXP prior_proposal_offsetSEXP, SEXP t_correctSEXP, SEXP transPSEXP, SEXP modelSEXP, SEXP transXSEXP, SEXP volzSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type param(paramSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type OriginTraj(OriginTrajSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_r(x_rSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< List >::type init(initSEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    Rcpp::traits::input_parameter< double >::type coal_log(coal_logSEXP);
    Rcpp::traits::input_parameter< double >::type prior_proposal_offset(prior_proposal_offsetSEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    Rcpp::traits::input_parameter< std::string >::type transP(transPSEXP);
    Rcpp::traits::input_parameter< std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    Rcpp::traits::input_parameter< bool >::type volz(volzSEXP);
    rcpp_result_gen = Rcpp::wrap(Update_Param(param, initial, t, OriginTraj, x_r, x_i, init, gridsize, coal_log, prior_proposal_offset, t_correct, transP, model, transX, volz));
    return rcpp_result_gen;
END_RCPP
}
// Param_Slice_update
arma::vec Param_Slice_update(arma::vec param, arma::vec x_r, arma::ivec x_i, double theta, arma::vec newChs, double rho);
RcppExport SEXP _phyloInt_Param_Slice_update(SEXP paramSEXP, SEXP x_rSEXP, SEXP x_iSEXP, SEXP thetaSEXP, SEXP newChsSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type param(paramSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_r(x_rSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type newChs(newChsSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(Param_Slice_update(param, x_r, x_i, theta, newChs, rho));
    return rcpp_result_gen;
END_RCPP
}
// Param_Slice_update_all
arma::vec Param_Slice_update_all(arma::vec par_old, arma::vec x_r, arma::ivec x_i, double theta, arma::vec newChs, double rho);
RcppExport SEXP _phyloInt_Param_Slice_update_all(SEXP par_oldSEXP, SEXP x_rSEXP, SEXP x_iSEXP, SEXP thetaSEXP, SEXP newChsSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type par_old(par_oldSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_r(x_rSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type newChs(newChsSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(Param_Slice_update_all(par_old, x_r, x_i, theta, newChs, rho));
    return rcpp_result_gen;
END_RCPP
}
// Param_Slice_update_all2
arma::vec Param_Slice_update_all2(arma::vec par_old, arma::vec x_r, arma::ivec x_i, double theta, arma::vec newChs, arma::ivec ESS_vec, List priorList);
RcppExport SEXP _phyloInt_Param_Slice_update_all2(SEXP par_oldSEXP, SEXP x_rSEXP, SEXP x_iSEXP, SEXP thetaSEXP, SEXP newChsSEXP, SEXP ESS_vecSEXP, SEXP priorListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type par_old(par_oldSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_r(x_rSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type newChs(newChsSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type ESS_vec(ESS_vecSEXP);
    Rcpp::traits::input_parameter< List >::type priorList(priorListSEXP);
    rcpp_result_gen = Rcpp::wrap(Param_Slice_update_all2(par_old, x_r, x_i, theta, newChs, ESS_vec, priorList));
    return rcpp_result_gen;
END_RCPP
}
// ESlice_change_points
List ESlice_change_points(arma::vec param, arma::vec initial, arma::vec t, arma::mat OriginTraj, arma::vec x_r, arma::ivec x_i, List init, int gridsize, double coal_log, double t_correct, std::string transP, std::string model, std::string transX, bool volz);
RcppExport SEXP _phyloInt_ESlice_change_points(SEXP paramSEXP, SEXP initialSEXP, SEXP tSEXP, SEXP OriginTrajSEXP, SEXP x_rSEXP, SEXP x_iSEXP, SEXP initSEXP, SEXP gridsizeSEXP, SEXP coal_logSEXP, SEXP t_correctSEXP, SEXP transPSEXP, SEXP modelSEXP, SEXP transXSEXP, SEXP volzSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type param(paramSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type OriginTraj(OriginTrajSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_r(x_rSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< List >::type init(initSEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    Rcpp::traits::input_parameter< double >::type coal_log(coal_logSEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    Rcpp::traits::input_parameter< std::string >::type transP(transPSEXP);
    Rcpp::traits::input_parameter< std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    Rcpp::traits::input_parameter< bool >::type volz(volzSEXP);
    rcpp_result_gen = Rcpp::wrap(ESlice_change_points(param, initial, t, OriginTraj, x_r, x_i, init, gridsize, coal_log, t_correct, transP, model, transX, volz));
    return rcpp_result_gen;
END_RCPP
}
// ESlice_par
List ESlice_par(arma::vec param, arma::vec initial, arma::vec t, arma::mat OriginTraj, List priorList, arma::vec x_r, arma::ivec x_i, List init, int gridsize, double coal_log, double t_correct, std::string transP, std::string model, std::string transX, bool volz);
RcppExport SEXP _phyloInt_ESlice_par(SEXP paramSEXP, SEXP initialSEXP, SEXP tSEXP, SEXP OriginTrajSEXP, SEXP priorListSEXP, SEXP x_rSEXP, SEXP x_iSEXP, SEXP initSEXP, SEXP gridsizeSEXP, SEXP coal_logSEXP, SEXP t_correctSEXP, SEXP transPSEXP, SEXP modelSEXP, SEXP transXSEXP, SEXP volzSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type param(paramSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type OriginTraj(OriginTrajSEXP);
    Rcpp::traits::input_parameter< List >::type priorList(priorListSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_r(x_rSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< List >::type init(initSEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    Rcpp::traits::input_parameter< double >::type coal_log(coal_logSEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    Rcpp::traits::input_parameter< std::string >::type transP(transPSEXP);
    Rcpp::traits::input_parameter< std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    Rcpp::traits::input_parameter< bool >::type volz(volzSEXP);
    rcpp_result_gen = Rcpp::wrap(ESlice_par(param, initial, t, OriginTraj, priorList, x_r, x_i, init, gridsize, coal_log, t_correct, transP, model, transX, volz));
    return rcpp_result_gen;
END_RCPP
}
// ESlice_par_General
List ESlice_par_General(arma::vec par_old, arma::vec t, arma::mat OriginTraj, List priorList, arma::vec x_r, arma::ivec x_i, List init, int gridsize, arma::ivec ESS_vec, double coal_log, double t_correct, std::string transP, std::string model, std::string transX, bool volz);
RcppExport SEXP _phyloInt_ESlice_par_General(SEXP par_oldSEXP, SEXP tSEXP, SEXP OriginTrajSEXP, SEXP priorListSEXP, SEXP x_rSEXP, SEXP x_iSEXP, SEXP initSEXP, SEXP gridsizeSEXP, SEXP ESS_vecSEXP, SEXP coal_logSEXP, SEXP t_correctSEXP, SEXP transPSEXP, SEXP modelSEXP, SEXP transXSEXP, SEXP volzSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type par_old(par_oldSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type OriginTraj(OriginTrajSEXP);
    Rcpp::traits::input_parameter< List >::type priorList(priorListSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_r(x_rSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< List >::type init(initSEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type ESS_vec(ESS_vecSEXP);
    Rcpp::traits::input_parameter< double >::type coal_log(coal_logSEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    Rcpp::traits::input_parameter< std::string >::type transP(transPSEXP);
    Rcpp::traits::input_parameter< std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    Rcpp::traits::input_parameter< bool >::type volz(volzSEXP);
    rcpp_result_gen = Rcpp::wrap(ESlice_par_General(par_old, t, OriginTraj, priorList, x_r, x_i, init, gridsize, ESS_vec, coal_log, t_correct, transP, model, transX, volz));
    return rcpp_result_gen;
END_RCPP
}
// ESlice_general_NC
List ESlice_general_NC(arma::mat f_cur, arma::mat OdeTraj, List FTs, arma::vec state, List init, arma::vec betaN, double t_correct, double lambda, double coal_log, int gridsize, bool volz, std::string model, std::string transX);
RcppExport SEXP _phyloInt_ESlice_general_NC(SEXP f_curSEXP, SEXP OdeTrajSEXP, SEXP FTsSEXP, SEXP stateSEXP, SEXP initSEXP, SEXP betaNSEXP, SEXP t_correctSEXP, SEXP lambdaSEXP, SEXP coal_logSEXP, SEXP gridsizeSEXP, SEXP volzSEXP, SEXP modelSEXP, SEXP transXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type f_cur(f_curSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type OdeTraj(OdeTrajSEXP);
    Rcpp::traits::input_parameter< List >::type FTs(FTsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type state(stateSEXP);
    Rcpp::traits::input_parameter< List >::type init(initSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaN(betaNSEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type coal_log(coal_logSEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    Rcpp::traits::input_parameter< bool >::type volz(volzSEXP);
    Rcpp::traits::input_parameter< std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    rcpp_result_gen = Rcpp::wrap(ESlice_general_NC(f_cur, OdeTraj, FTs, state, init, betaN, t_correct, lambda, coal_log, gridsize, volz, model, transX));
    return rcpp_result_gen;
END_RCPP
}
// ESlice_general2
arma::mat ESlice_general2(arma::mat f_cur, arma::mat OdeTraj, List FTs, arma::vec state, List init, arma::vec betaN, double t_correct, double lambda, int reps, int gridsize, bool volz, std::string model, std::string transX);
RcppExport SEXP _phyloInt_ESlice_general2(SEXP f_curSEXP, SEXP OdeTrajSEXP, SEXP FTsSEXP, SEXP stateSEXP, SEXP initSEXP, SEXP betaNSEXP, SEXP t_correctSEXP, SEXP lambdaSEXP, SEXP repsSEXP, SEXP gridsizeSEXP, SEXP volzSEXP, SEXP modelSEXP, SEXP transXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type f_cur(f_curSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type OdeTraj(OdeTrajSEXP);
    Rcpp::traits::input_parameter< List >::type FTs(FTsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type state(stateSEXP);
    Rcpp::traits::input_parameter< List >::type init(initSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaN(betaNSEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type reps(repsSEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    Rcpp::traits::input_parameter< bool >::type volz(volzSEXP);
    Rcpp::traits::input_parameter< std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    rcpp_result_gen = Rcpp::wrap(ESlice_general2(f_cur, OdeTraj, FTs, state, init, betaN, t_correct, lambda, reps, gridsize, volz, model, transX));
    return rcpp_result_gen;
END_RCPP
}
// log_incidence
double log_incidence(arma::mat Traj, List IncidenceList, arma::vec Incid_Par, bool Pois, bool enable);
RcppExport SEXP _phyloInt_log_incidence(SEXP TrajSEXP, SEXP IncidenceListSEXP, SEXP Incid_ParSEXP, SEXP PoisSEXP, SEXP enableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Traj(TrajSEXP);
    Rcpp::traits::input_parameter< List >::type IncidenceList(IncidenceListSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Incid_Par(Incid_ParSEXP);
    Rcpp::traits::input_parameter< bool >::type Pois(PoisSEXP);
    Rcpp::traits::input_parameter< bool >::type enable(enableSEXP);
    rcpp_result_gen = Rcpp::wrap(log_incidence(Traj, IncidenceList, Incid_Par, Pois, enable));
    return rcpp_result_gen;
END_RCPP
}
// Update_Param_JointData
List Update_Param_JointData(arma::vec param, arma::vec initial, arma::vec incid_par, arma::vec t, arma::mat OriginTraj, arma::vec x_r, arma::ivec x_i, List init, List Incidence_data, int gridsize, double coal_log, double incid_log, double prior_proposal_offset, double t_correct, std::string transP, std::string model, std::string transX, bool volz, bool addCoal, bool addIncid);
RcppExport SEXP _phyloInt_Update_Param_JointData(SEXP paramSEXP, SEXP initialSEXP, SEXP incid_parSEXP, SEXP tSEXP, SEXP OriginTrajSEXP, SEXP x_rSEXP, SEXP x_iSEXP, SEXP initSEXP, SEXP Incidence_dataSEXP, SEXP gridsizeSEXP, SEXP coal_logSEXP, SEXP incid_logSEXP, SEXP prior_proposal_offsetSEXP, SEXP t_correctSEXP, SEXP transPSEXP, SEXP modelSEXP, SEXP transXSEXP, SEXP volzSEXP, SEXP addCoalSEXP, SEXP addIncidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type param(paramSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type incid_par(incid_parSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type OriginTraj(OriginTrajSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_r(x_rSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< List >::type init(initSEXP);
    Rcpp::traits::input_parameter< List >::type Incidence_data(Incidence_dataSEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    Rcpp::traits::input_parameter< double >::type coal_log(coal_logSEXP);
    Rcpp::traits::input_parameter< double >::type incid_log(incid_logSEXP);
    Rcpp::traits::input_parameter< double >::type prior_proposal_offset(prior_proposal_offsetSEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    Rcpp::traits::input_parameter< std::string >::type transP(transPSEXP);
    Rcpp::traits::input_parameter< std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    Rcpp::traits::input_parameter< bool >::type volz(volzSEXP);
    Rcpp::traits::input_parameter< bool >::type addCoal(addCoalSEXP);
    Rcpp::traits::input_parameter< bool >::type addIncid(addIncidSEXP);
    rcpp_result_gen = Rcpp::wrap(Update_Param_JointData(param, initial, incid_par, t, OriginTraj, x_r, x_i, init, Incidence_data, gridsize, coal_log, incid_log, prior_proposal_offset, t_correct, transP, model, transX, volz, addCoal, addIncid));
    return rcpp_result_gen;
END_RCPP
}
// ESlice_par_General_JointData
List ESlice_par_General_JointData(arma::vec par_old, arma::vec incid_par, arma::vec t, arma::mat OriginTraj, List priorList, arma::vec x_r, arma::ivec x_i, List init, List Incidence_obs, int gridsize, arma::ivec ESS_vec, double coal_log, double incid_log, double t_correct, std::string transP, std::string model, std::string transX, bool volz, bool addCoal, bool addIncid);
RcppExport SEXP _phyloInt_ESlice_par_General_JointData(SEXP par_oldSEXP, SEXP incid_parSEXP, SEXP tSEXP, SEXP OriginTrajSEXP, SEXP priorListSEXP, SEXP x_rSEXP, SEXP x_iSEXP, SEXP initSEXP, SEXP Incidence_obsSEXP, SEXP gridsizeSEXP, SEXP ESS_vecSEXP, SEXP coal_logSEXP, SEXP incid_logSEXP, SEXP t_correctSEXP, SEXP transPSEXP, SEXP modelSEXP, SEXP transXSEXP, SEXP volzSEXP, SEXP addCoalSEXP, SEXP addIncidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type par_old(par_oldSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type incid_par(incid_parSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type OriginTraj(OriginTrajSEXP);
    Rcpp::traits::input_parameter< List >::type priorList(priorListSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_r(x_rSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< List >::type init(initSEXP);
    Rcpp::traits::input_parameter< List >::type Incidence_obs(Incidence_obsSEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type ESS_vec(ESS_vecSEXP);
    Rcpp::traits::input_parameter< double >::type coal_log(coal_logSEXP);
    Rcpp::traits::input_parameter< double >::type incid_log(incid_logSEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    Rcpp::traits::input_parameter< std::string >::type transP(transPSEXP);
    Rcpp::traits::input_parameter< std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    Rcpp::traits::input_parameter< bool >::type volz(volzSEXP);
    Rcpp::traits::input_parameter< bool >::type addCoal(addCoalSEXP);
    Rcpp::traits::input_parameter< bool >::type addIncid(addIncidSEXP);
    rcpp_result_gen = Rcpp::wrap(ESlice_par_General_JointData(par_old, incid_par, t, OriginTraj, priorList, x_r, x_i, init, Incidence_obs, gridsize, ESS_vec, coal_log, incid_log, t_correct, transP, model, transX, volz, addCoal, addIncid));
    return rcpp_result_gen;
END_RCPP
}
// ESlice_general_NC_joint
List ESlice_general_NC_joint(arma::mat f_cur, arma::mat OdeTraj, List FTs, arma::vec state, arma::vec incid_par, List init, List Incidence, arma::vec betaN, double t_correct, double lambda, double coal_log, double IncidLog, int gridsize, bool volz, std::string model, std::string transX, bool addCoal, bool addIncid);
RcppExport SEXP _phyloInt_ESlice_general_NC_joint(SEXP f_curSEXP, SEXP OdeTrajSEXP, SEXP FTsSEXP, SEXP stateSEXP, SEXP incid_parSEXP, SEXP initSEXP, SEXP IncidenceSEXP, SEXP betaNSEXP, SEXP t_correctSEXP, SEXP lambdaSEXP, SEXP coal_logSEXP, SEXP IncidLogSEXP, SEXP gridsizeSEXP, SEXP volzSEXP, SEXP modelSEXP, SEXP transXSEXP, SEXP addCoalSEXP, SEXP addIncidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type f_cur(f_curSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type OdeTraj(OdeTrajSEXP);
    Rcpp::traits::input_parameter< List >::type FTs(FTsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type state(stateSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type incid_par(incid_parSEXP);
    Rcpp::traits::input_parameter< List >::type init(initSEXP);
    Rcpp::traits::input_parameter< List >::type Incidence(IncidenceSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaN(betaNSEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type coal_log(coal_logSEXP);
    Rcpp::traits::input_parameter< double >::type IncidLog(IncidLogSEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    Rcpp::traits::input_parameter< bool >::type volz(volzSEXP);
    Rcpp::traits::input_parameter< std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    Rcpp::traits::input_parameter< bool >::type addCoal(addCoalSEXP);
    Rcpp::traits::input_parameter< bool >::type addIncid(addIncidSEXP);
    rcpp_result_gen = Rcpp::wrap(ESlice_general_NC_joint(f_cur, OdeTraj, FTs, state, incid_par, init, Incidence, betaN, t_correct, lambda, coal_log, IncidLog, gridsize, volz, model, transX, addCoal, addIncid));
    return rcpp_result_gen;
END_RCPP
}
// Update_Param_Pref
List Update_Param_Pref(arma::vec param, arma::vec initial, arma::vec pref_par, arma::vec t, arma::mat OriginTraj, arma::vec x_r, arma::ivec x_i, List init, List SampleInit, int gridsize, double coal_log, double pref_log, double prior_proposal_offset, double t_correct, std::string transP, std::string model, std::string transX, bool volz, bool addCoal, bool addPref);
RcppExport SEXP _phyloInt_Update_Param_Pref(SEXP paramSEXP, SEXP initialSEXP, SEXP pref_parSEXP, SEXP tSEXP, SEXP OriginTrajSEXP, SEXP x_rSEXP, SEXP x_iSEXP, SEXP initSEXP, SEXP SampleInitSEXP, SEXP gridsizeSEXP, SEXP coal_logSEXP, SEXP pref_logSEXP, SEXP prior_proposal_offsetSEXP, SEXP t_correctSEXP, SEXP transPSEXP, SEXP modelSEXP, SEXP transXSEXP, SEXP volzSEXP, SEXP addCoalSEXP, SEXP addPrefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type param(paramSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pref_par(pref_parSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type OriginTraj(OriginTrajSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_r(x_rSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< List >::type init(initSEXP);
    Rcpp::traits::input_parameter< List >::type SampleInit(SampleInitSEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    Rcpp::traits::input_parameter< double >::type coal_log(coal_logSEXP);
    Rcpp::traits::input_parameter< double >::type pref_log(pref_logSEXP);
    Rcpp::traits::input_parameter< double >::type prior_proposal_offset(prior_proposal_offsetSEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    Rcpp::traits::input_parameter< std::string >::type transP(transPSEXP);
    Rcpp::traits::input_parameter< std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    Rcpp::traits::input_parameter< bool >::type volz(volzSEXP);
    Rcpp::traits::input_parameter< bool >::type addCoal(addCoalSEXP);
    Rcpp::traits::input_parameter< bool >::type addPref(addPrefSEXP);
    rcpp_result_gen = Rcpp::wrap(Update_Param_Pref(param, initial, pref_par, t, OriginTraj, x_r, x_i, init, SampleInit, gridsize, coal_log, pref_log, prior_proposal_offset, t_correct, transP, model, transX, volz, addCoal, addPref));
    return rcpp_result_gen;
END_RCPP
}
// ESlice_par_General_pref
List ESlice_par_General_pref(arma::vec par_old, arma::vec pref_par, arma::vec t, arma::mat OriginTraj, List priorList, arma::vec x_r, arma::ivec x_i, List init, List SampleInit, int gridsize, arma::ivec ESS_vec, double coal_log, double pref_log, double t_correct, std::string transP, std::string model, std::string transX, bool volz, bool addCoal, bool addPref);
RcppExport SEXP _phyloInt_ESlice_par_General_pref(SEXP par_oldSEXP, SEXP pref_parSEXP, SEXP tSEXP, SEXP OriginTrajSEXP, SEXP priorListSEXP, SEXP x_rSEXP, SEXP x_iSEXP, SEXP initSEXP, SEXP SampleInitSEXP, SEXP gridsizeSEXP, SEXP ESS_vecSEXP, SEXP coal_logSEXP, SEXP pref_logSEXP, SEXP t_correctSEXP, SEXP transPSEXP, SEXP modelSEXP, SEXP transXSEXP, SEXP volzSEXP, SEXP addCoalSEXP, SEXP addPrefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type par_old(par_oldSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pref_par(pref_parSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type OriginTraj(OriginTrajSEXP);
    Rcpp::traits::input_parameter< List >::type priorList(priorListSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_r(x_rSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< List >::type init(initSEXP);
    Rcpp::traits::input_parameter< List >::type SampleInit(SampleInitSEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type ESS_vec(ESS_vecSEXP);
    Rcpp::traits::input_parameter< double >::type coal_log(coal_logSEXP);
    Rcpp::traits::input_parameter< double >::type pref_log(pref_logSEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    Rcpp::traits::input_parameter< std::string >::type transP(transPSEXP);
    Rcpp::traits::input_parameter< std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    Rcpp::traits::input_parameter< bool >::type volz(volzSEXP);
    Rcpp::traits::input_parameter< bool >::type addCoal(addCoalSEXP);
    Rcpp::traits::input_parameter< bool >::type addPref(addPrefSEXP);
    rcpp_result_gen = Rcpp::wrap(ESlice_par_General_pref(par_old, pref_par, t, OriginTraj, priorList, x_r, x_i, init, SampleInit, gridsize, ESS_vec, coal_log, pref_log, t_correct, transP, model, transX, volz, addCoal, addPref));
    return rcpp_result_gen;
END_RCPP
}
// ESlice_general_NC_pref
List ESlice_general_NC_pref(arma::mat f_cur, arma::mat OdeTraj, List FTs, arma::vec state, arma::vec pref_par, List init, List SampleInit, arma::vec betaN, double t_correct, double lambda, double coal_log, double PrefLog, int gridsize, bool volz, std::string model, std::string transX, bool addCoal, bool addPref);
RcppExport SEXP _phyloInt_ESlice_general_NC_pref(SEXP f_curSEXP, SEXP OdeTrajSEXP, SEXP FTsSEXP, SEXP stateSEXP, SEXP pref_parSEXP, SEXP initSEXP, SEXP SampleInitSEXP, SEXP betaNSEXP, SEXP t_correctSEXP, SEXP lambdaSEXP, SEXP coal_logSEXP, SEXP PrefLogSEXP, SEXP gridsizeSEXP, SEXP volzSEXP, SEXP modelSEXP, SEXP transXSEXP, SEXP addCoalSEXP, SEXP addPrefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type f_cur(f_curSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type OdeTraj(OdeTrajSEXP);
    Rcpp::traits::input_parameter< List >::type FTs(FTsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type state(stateSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pref_par(pref_parSEXP);
    Rcpp::traits::input_parameter< List >::type init(initSEXP);
    Rcpp::traits::input_parameter< List >::type SampleInit(SampleInitSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaN(betaNSEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type coal_log(coal_logSEXP);
    Rcpp::traits::input_parameter< double >::type PrefLog(PrefLogSEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    Rcpp::traits::input_parameter< bool >::type volz(volzSEXP);
    Rcpp::traits::input_parameter< std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type transX(transXSEXP);
    Rcpp::traits::input_parameter< bool >::type addCoal(addCoalSEXP);
    Rcpp::traits::input_parameter< bool >::type addPref(addPrefSEXP);
    rcpp_result_gen = Rcpp::wrap(ESlice_general_NC_pref(f_cur, OdeTraj, FTs, state, pref_par, init, SampleInit, betaN, t_correct, lambda, coal_log, PrefLog, gridsize, volz, model, transX, addCoal, addPref));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_phyloInt_mvrnormArma", (DL_FUNC) &_phyloInt_mvrnormArma, 2},
    {"_phyloInt_LogTraj", (DL_FUNC) &_phyloInt_LogTraj, 1},
    {"_phyloInt_betaTs", (DL_FUNC) &_phyloInt_betaTs, 4},
    {"_phyloInt_RTs", (DL_FUNC) &_phyloInt_RTs, 4},
    {"_phyloInt_param_transform", (DL_FUNC) &_phyloInt_param_transform, 4},
    {"_phyloInt_ODE_SIR_one", (DL_FUNC) &_phyloInt_ODE_SIR_one, 7},
    {"_phyloInt_ODE_SEIR_one", (DL_FUNC) &_phyloInt_ODE_SEIR_one, 7},
    {"_phyloInt_ODE_SIRS_one", (DL_FUNC) &_phyloInt_ODE_SIRS_one, 7},
    {"_phyloInt_SIRS_F", (DL_FUNC) &_phyloInt_SIRS_F, 3},
    {"_phyloInt_SIR_F", (DL_FUNC) &_phyloInt_SIR_F, 3},
    {"_phyloInt_SEIR2_F", (DL_FUNC) &_phyloInt_SEIR2_F, 3},
    {"_phyloInt_SEIR_F", (DL_FUNC) &_phyloInt_SEIR_F, 3},
    {"_phyloInt_SIR_h", (DL_FUNC) &_phyloInt_SIR_h, 3},
    {"_phyloInt_SEIR2_h", (DL_FUNC) &_phyloInt_SEIR2_h, 3},
    {"_phyloInt_SEIR_h", (DL_FUNC) &_phyloInt_SEIR_h, 3},
    {"_phyloInt_ODE_rk45", (DL_FUNC) &_phyloInt_ODE_rk45, 8},
    {"_phyloInt_ODE_rk45_stop", (DL_FUNC) &_phyloInt_ODE_rk45_stop, 9},
    {"_phyloInt_SigmaF", (DL_FUNC) &_phyloInt_SigmaF, 7},
    {"_phyloInt_KF_param", (DL_FUNC) &_phyloInt_KF_param, 8},
    {"_phyloInt_KF_param_chol", (DL_FUNC) &_phyloInt_KF_param_chol, 8},
    {"_phyloInt_log_like_traj_general2", (DL_FUNC) &_phyloInt_log_like_traj_general2, 5},
    {"_phyloInt_log_like_traj_general_ez", (DL_FUNC) &_phyloInt_log_like_traj_general_ez, 10},
    {"_phyloInt_log_like_traj_general_adjust", (DL_FUNC) &_phyloInt_log_like_traj_general_adjust, 5},
    {"_phyloInt_Traj_sim_general3", (DL_FUNC) &_phyloInt_Traj_sim_general3, 3},
    {"_phyloInt_Traj_sim_general_noncentral", (DL_FUNC) &_phyloInt_Traj_sim_general_noncentral, 3},
    {"_phyloInt_TransformTraj", (DL_FUNC) &_phyloInt_TransformTraj, 3},
    {"_phyloInt_Traj_sim_ezG2", (DL_FUNC) &_phyloInt_Traj_sim_ezG2, 10},
    {"_phyloInt_Traj_sim_ezG_NC", (DL_FUNC) &_phyloInt_Traj_sim_ezG_NC, 10},
    {"_phyloInt_coal_loglik3", (DL_FUNC) &_phyloInt_coal_loglik3, 6},
    {"_phyloInt_volz_loglik_nh3", (DL_FUNC) &_phyloInt_volz_loglik_nh3, 6},
    {"_phyloInt_volz_loglik_nh2", (DL_FUNC) &_phyloInt_volz_loglik_nh2, 6},
    {"_phyloInt_volz_loglik_nh_adj", (DL_FUNC) &_phyloInt_volz_loglik_nh_adj, 6},
    {"_phyloInt_Ode_Coarse_Slicer", (DL_FUNC) &_phyloInt_Ode_Coarse_Slicer, 2},
    {"_phyloInt_SIR_incidence_Traj", (DL_FUNC) &_phyloInt_SIR_incidence_Traj, 2},
    {"_phyloInt_log_pref", (DL_FUNC) &_phyloInt_log_pref, 5},
    {"_phyloInt_SIR_Traj", (DL_FUNC) &_phyloInt_SIR_Traj, 2},
    {"_phyloInt_log_prev", (DL_FUNC) &_phyloInt_log_prev, 5},
    {"_phyloInt_log_incidence_approx", (DL_FUNC) &_phyloInt_log_incidence_approx, 6},
    {"_phyloInt_New_Param_List", (DL_FUNC) &_phyloInt_New_Param_List, 9},
    {"_phyloInt_Update_Param", (DL_FUNC) &_phyloInt_Update_Param, 15},
    {"_phyloInt_Param_Slice_update", (DL_FUNC) &_phyloInt_Param_Slice_update, 6},
    {"_phyloInt_Param_Slice_update_all", (DL_FUNC) &_phyloInt_Param_Slice_update_all, 6},
    {"_phyloInt_Param_Slice_update_all2", (DL_FUNC) &_phyloInt_Param_Slice_update_all2, 7},
    {"_phyloInt_ESlice_change_points", (DL_FUNC) &_phyloInt_ESlice_change_points, 14},
    {"_phyloInt_ESlice_par", (DL_FUNC) &_phyloInt_ESlice_par, 15},
    {"_phyloInt_ESlice_par_General", (DL_FUNC) &_phyloInt_ESlice_par_General, 15},
    {"_phyloInt_ESlice_general_NC", (DL_FUNC) &_phyloInt_ESlice_general_NC, 13},
    {"_phyloInt_ESlice_general2", (DL_FUNC) &_phyloInt_ESlice_general2, 13},
    {"_phyloInt_log_incidence", (DL_FUNC) &_phyloInt_log_incidence, 5},
    {"_phyloInt_Update_Param_JointData", (DL_FUNC) &_phyloInt_Update_Param_JointData, 20},
    {"_phyloInt_ESlice_par_General_JointData", (DL_FUNC) &_phyloInt_ESlice_par_General_JointData, 20},
    {"_phyloInt_ESlice_general_NC_joint", (DL_FUNC) &_phyloInt_ESlice_general_NC_joint, 18},
    {"_phyloInt_Update_Param_Pref", (DL_FUNC) &_phyloInt_Update_Param_Pref, 20},
    {"_phyloInt_ESlice_par_General_pref", (DL_FUNC) &_phyloInt_ESlice_par_General_pref, 20},
    {"_phyloInt_ESlice_general_NC_pref", (DL_FUNC) &_phyloInt_ESlice_general_NC_pref, 18},
    {NULL, NULL, 0}
};

RcppExport void R_init_phyloInt(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
